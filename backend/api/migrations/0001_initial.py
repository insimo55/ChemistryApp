# Generated by Django 4.2 on 2025-07-30 08:53

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Администратор'), ('engineer', 'Инженер'), ('logistician', 'Логист')], default='engineer', max_length=20, verbose_name='Роль')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Chemical',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название реагента')),
                ('unit_of_measurement', models.CharField(max_length=50, verbose_name='Единица измерения (кг, л, шт)')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Реагент',
                'verbose_name_plural': 'Реагенты',
            },
        ),
        migrations.CreateModel(
            name='Facility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название объекта')),
                ('type', models.CharField(choices=[('warehouse', 'Склад'), ('well', 'Скважина'), ('other', 'Прочее')], max_length=20, verbose_name='Тип объекта')),
                ('location', models.CharField(blank=True, max_length=255, verbose_name='Местоположение')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Объект',
                'verbose_name_plural': 'Объекты',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('add', 'Поступление'), ('consume', 'Списание'), ('transfer', 'Перемещение')], max_length=10, verbose_name='Тип транзакции')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Количество')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время операции')),
                ('document_name', models.CharField(blank=True, max_length=255, verbose_name='Название документа')),
                ('document_file', models.FileField(blank=True, null=True, upload_to='documents/%Y/%m/%d/', verbose_name='Файл документа')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('chemical', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.chemical', verbose_name='Реагент')),
                ('from_facility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions_from', to='api.facility', verbose_name='Из объекта')),
                ('performed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Выполнил')),
                ('to_facility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions_to', to='api.facility', verbose_name='В объект')),
            ],
            options={
                'verbose_name': 'Транзакция',
                'verbose_name_plural': 'Транзакции',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='related_facility',
            field=models.ForeignKey(blank=True, help_text='Обязательно для инженеров', null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.facility', verbose_name='Закрепленный объект'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Количество')),
                ('chemical', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='api.chemical', verbose_name='Реагент')),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='api.facility', verbose_name='Объект')),
            ],
            options={
                'verbose_name': 'Остаток на объекте',
                'verbose_name_plural': 'Остатки на объектах (Инвентарь)',
                'unique_together': {('facility', 'chemical')},
            },
        ),
    ]
